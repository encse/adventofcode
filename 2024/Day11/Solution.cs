namespace AdventOfCode.Y2024.Day11;

using System.Linq;

using Cache = System.Collections.Concurrent.ConcurrentDictionary<(string, int), long>;

[ProblemName("Plutonian Pebbles")]
class Solution : Solver {

    public object PartOne(string input) => StoneCount(input, 25);

    public object PartTwo(string input) => StoneCount(input, 75);

    long StoneCount(string input, int blinks) {
        var cache = new Cache();
        return input.Split(" ").Sum(n => Eval(long.Parse(n), blinks, cache));
    }

    // Recursively calculates the total number of stones generated by a single engravement (n)
    // after a specified number of blinks. Uses caching to optimize and prevent exponential
    // computation by storing intermediate results.
    long Eval(long n, int blinks, Cache cache) =>
        cache.GetOrAdd((n.ToString(), blinks), key => 
            key switch {
                (_, 0)   => 1,

                ("0", _) => 
                    Eval(1, blinks - 1, cache),
                
                (var st, _) when st.Length % 2 == 0 =>
                    Eval(long.Parse(st[0..(st.Length / 2)]), blinks - 1, cache) +
                    Eval(long.Parse(st[(st.Length / 2)..]),  blinks - 1, cache),

                _ =>  
                    Eval(2024 * n, blinks - 1, cache)   
            }
        );
}